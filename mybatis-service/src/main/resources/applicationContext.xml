<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">

   <!--加载con.pig.learn下所有的bean，但是不要加载controller相关注解-->
    <!--<context:component-scan base-package="com.pig.learn">-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />-->
    <!--</context:component-scan>-->

    <!--注解-->
    <!--//通过aop命名空间的-->
    <!--<aop:aspectj-autoproxy />-->
    <!--声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。-->
    <!--当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator-->
    <!--进行自动代理的创建工作，但具体实现的细节已经被<aop:aspectj-autoproxy  />-->
    <!--隐藏起来了-->

    <!--<aop:aspectj-autoproxy />有一个proxy-target-class属性，默认为false，-->
    <!--表示使用jdk动态代理织入增强，当配为
    <aop:aspectj-autoproxy   poxy-target-class="true"/>时，
    <!-表示使用CGLib动态代理技术织入增强。-->
    <!--不过即使proxy-target-class设置为false，-->
    <!--如果目标类没有声明接口，则spring将自动使用CGLib动态代理。-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
    <task:annotation-driven/>

    <!--资源加载-->
    <context:property-placeholder location="classpath:config.properties"/>

    <!--xml文件引入-->
    <import resource="classpath*:mybatis/mysql-datasource.xml"/>

</beans>
